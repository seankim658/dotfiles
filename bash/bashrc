# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)

# If not running interactively, don't do anything
# Prevents from being sourced on remote (rsh) or secure shell (ssh)
case $- in
    *i*) ;;
      *) return;;
esac

# --------------------------
# History Configuration
# --------------------------
HISTCONTROL=ignoreboth      # Avoid duplicate lines and lines starting with spaces
shopt -s histappend         # Append to the history file rather than overwrite
HISTSIZE=1000               # Number of history commands stored in memory
HISTFILESIZE=2000           # Number of commands stored in history file


# --------------------------
# Shell Behavior Settings
# --------------------------
shopt -s checkwinsize       # Updated LINES and COLUMNS after resizing terminal

# Make `less` more friendly for non-text input files (requires lesspipe)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# --------------------------
# Prompt Configuration
# --------------------------
# Set variable identifying the chroot you work in (used in the prompt below).
# A chroot is a Linux feature that creates an isolated environment where the system
# operates as if the root directory is different (common in dev or recovery scenarios).
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Determine if the terminal supports color
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# Override color settings if explicitly set
if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# Configure the prompt (PS1)
# - Includes username (\u), hostname (\h), and working directory (\w)
if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# Set terminal title for xterm/rxvt
# - Displays user, host, and current directory in the terminal title bar
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Setup dircolors only if available
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

# --------------------------
# Aliases
# --------------------------
# Directory listings
if [[ "$OSTYPE" == "darwin"* ]]; then
    alias ls='ls -G'                                # macOS uses -G for colors
    alias aw='aerospace list-windows --workspace'   # aerospace list windows alias
else
    alias ls='ls --color=auto'  # Linux uses --color=auto for colors
fi

# Always set color support for grep, fgrep, and egrep
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias ll='ls -ltr'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
if [[ "$OSTYPE" == "darwin"* ]]; then
    alias alert='osascript -e "display notification \"$(history | tail -n1 | sed -e 's/^\s*[0-9]\+\s*//')\" with title \"Alert\""'
else
    alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history | tail -n1 | sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
fi

# --------------------------
# Load Bash Aliases
# --------------------------
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# --------------------------
# Completion Configuration
# --------------------------
if ! shopt -oq posix; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
        if [ -f /opt/homebrew/etc/bash_completion ]; then
            . /opt/homebrew/etc/bash_completion
        fi
        if [ -f ~/projects/misc/.git-completion.bash ]; then
            . ~/projects/misc/.git-completion.bash
        fi
    else
        if [ -f /usr/share/bash-completion/bash_completion ]; then
            . /usr/share/bash-completion/bash_completion
        elif [ -f /etc/bash_completion ]; then
            . /etc/bash_completion
        fi
    fi
fi

# --------------------------
# PATH Management
# --------------------------
# Function to avoid redundant PATH entries
add_to_path() {
    case ":$PATH:" in
        *":$1:"*) ;;  # Skip if already in PATH
        *) export PATH="$1:$PATH" ;;
    esac
}

# Add platform-specific paths
if [[ "$OSTYPE" == "darwin"* ]]; then
    add_to_path "$HOME/Library/Python/3.11/bin"   # User-installed python scripts
else
    add_to_path "/usr/local/bin"                  # Common Linux binaries
fi

# Add custom paths
export PATH="$PATH:/opt/nvim-linux64/bin"         # Add neovim binaries
if [ -f "$HOME/.deno/bin" ]; then
  add_to_path "$HOME/.deno/bin"
fi

# --------------------------
# Environment Variables
# --------------------------
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                    # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm completion

# Cargo: Rust package manager and build system
. "$HOME/.cargo/env"

# --------------------------
# Custom Completions
# --------------------------
source ~/projects/personal/codeprompts/cli/completions/codeprompt-completions.bash
